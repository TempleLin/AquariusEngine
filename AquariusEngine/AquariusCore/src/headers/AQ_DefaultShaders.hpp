namespace aquarius_engine {
	inline const char* slotInstanceShader_vs{
		"#version 330 core\n"
		"layout (location = 0) in vec3 aPos;\n"
		"layout (location = 1) in vec3 aColor;\n"
		"layout (location = 2) in vec2 aTexCoord;\n"
		"layout (location = 3) in vec2 aOffset;\n"
		"\n"
		"out vec3 ourColor;\n"
		"out vec2 TexCoord;\n"
		"\n"
		"uniform float windowWidth, windowHeight;\n"
		"uniform bool keepAspectRatio;\n"
		"uniform mat4 offsetMat;\n"
		"uniform vec3 color;\n"
		"\n"
		"vec3 resultPos;\n"
		"\n"
		"void setAspectRatio();\n"
		"\n"
		"void main() {\n"
		"    setAspectRatio();\n"
		"    gl_Position = offsetMat * vec4(resultPos, 1.0);\n"
		"    gl_Position.xy += aOffset;\n"
		"\n"
		"    ourColor = aColor;\n"
		"    ourColor *= color;\n"
		"    TexCoord = aTexCoord;\n"
		"}\n"
		"\n"
		"void setAspectRatio() {\n"
		"    if (keepAspectRatio) {\n"
		"        if (windowWidth > windowHeight) {\n"
		"            resultPos = vec3(windowHeight / windowWidth * aPos.x, aPos.y, aPos.z);\n"
		"        } else if (windowWidth < windowHeight) {\n"
		"            resultPos = vec3(aPos.x, windowWidth / windowHeight * aPos.y, aPos.z);\n"
		"        } else {\n"
		"            resultPos = aPos;\n"
		"        }\n"
		"    } else {\n"
		"        resultPos = aPos;\n"
		"    }\n"
		"}\n"
	};

	inline const char* slotInstanceShader_fs{
		"#version 330 core\n"
		"out vec4 FragColor;\n"
		"  \n"
		"in vec3 ourColor;\n"
		"in vec2 TexCoord;\n"
		"\n"
		"uniform sampler2D ourTexture;\n"
		"uniform bool useTexture;\n"
		"\n"
		"void main()\n"
		"{\n"
		"    if (useTexture) {\n"
		"        // @Multiply the texture by color mixes the RGB color and texture.\n"
		"        FragColor = texture(ourTexture, TexCoord) * vec4(ourColor, 1.0);\n"
		"    } else {\n"
		"        FragColor = vec4(ourColor, 1.0);\n"
		"    }\n"
		"\n"
		"    if (FragColor.a == 0.f){\n"
		"        discard;\n"
		"    }\n"
		"}\n"
	};
}